/* Generated By:JavaCC: Do not edit this line. FormulaParser.java */
package org.openlca.expressions;
import java.io.Reader;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import org.openlca.expressions.functions.*;

public class FormulaParser implements FormulaParserConstants {

    protected Stack<Expression> argStack = new Stack<Expression>();
    protected FunctionFactory functionFactory = FunctionFactory.getInstance();
    protected List<VariableFunction> variables = new ArrayList<VariableFunction>();

    public Expression getExpression() {
        return argStack.pop();
    }

    public List<VariableFunction> getVariables() {
      return variables;
    }

    public FormulaParser(Reader reader, FunctionFactory functionFactory) {
        this(reader);
        this.functionFactory = functionFactory;
    }

    private void combineBinary(Token x, Expression f) {
         Expression a = argStack.pop();
         Expression b = argStack.pop();
         f.addArgument(b);
         f.addArgument(a);
         f.setPosition(x.beginLine, x.beginColumn);
         argStack.push(f);
    }

// the entry point of the parser
  final public void parse() throws ParseException {
    expand();
    jj_consume_token(0);
  }

  final public void expand() throws ParseException {
    logicalOr();
  }

// the logical or has the lowest operator precedence: 1
  final public void logicalOr() throws ParseException {
  Token x;
    logicalXor();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      x = jj_consume_token(OR);
      logicalXor();
              combineBinary(x, new OpOr());
    }
  }

// the XOR operator, precedence 2
  final public void logicalXor() throws ParseException {
  Token x;
    logicalAnd();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      x = jj_consume_token(XOR);
      logicalAnd();
              combineBinary(x, new OpXor());
    }
  }

// the AND operator, precedence 3
  final public void logicalAnd() throws ParseException {
  Token x;
    compare();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      x = jj_consume_token(AND);
      compare();
              combineBinary(x, new OpAnd());
    }
  }

// comparison operators (<, <=, =, ...), precedence 4
  final public void compare() throws ParseException {
  Token x;
    realsum();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
      case LTEQ:
      case EQ:
      case NEQ:
      case GT:
      case GTEQ:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        x = jj_consume_token(LT);
        break;
      case LTEQ:
        x = jj_consume_token(LTEQ);
        break;
      case EQ:
        x = jj_consume_token(EQ);
        break;
      case NEQ:
        x = jj_consume_token(NEQ);
        break;
      case GT:
        x = jj_consume_token(GT);
        break;
      case GTEQ:
        x = jj_consume_token(GTEQ);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      realsum();
                Expression func = null;
                if ( x.kind == LT )
                    func = new OpLessThan();
                else if (x.kind == LTEQ)
                    func = new OpLessThanOrEqual();
                else if (x.kind == EQ)
                    func = new OpEqual();
                else if (x.kind == NEQ)
                    func = new OpNotEqual();
                else if (x.kind == GT)
                    func = new OpGreaterThan();
                else if (x.kind == GTEQ)
                    func = new OpGreaterThanOrEqual();
                else
                    {if (true) throw new ParseException("Unexpected token kind: " + x.kind);}
               combineBinary(x, func);
    }
  }

// addition and subtraction, precedence 5
  final public void realsum() throws ParseException {
  Token x;
    term();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        x = jj_consume_token(PLUS);
        break;
      case MINUS:
        x = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      term();
                if ( x.kind == PLUS ) {
                  combineBinary(x, new OpAddition());
                } else {
                  combineBinary(x, new OpSubstraction());
                }
    }
  }

// multiplication, division, modulo, ..., precedence 6
  final public void term() throws ParseException {
  Token x;
    power();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
      case DIVIDE:
      case INTDIVIDE:
      case MOD:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
        x = jj_consume_token(MULTIPLY);
        break;
      case DIVIDE:
        x = jj_consume_token(DIVIDE);
        break;
      case INTDIVIDE:
        x = jj_consume_token(INTDIVIDE);
        break;
      case MOD:
        x = jj_consume_token(MOD);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      power();
        if ( x.kind == MULTIPLY ) {
            combineBinary(x, new OpMultiplication());
        } else if ( x.kind == INTDIVIDE) {
            combineBinary(x, new OpIntegerDivision());
        } else if (x.kind == DIVIDE) {
            combineBinary(x, new OpDivision());
        } else if (x.kind == MOD) {
            combineBinary(x, new OpModuloDivision());
        }
    }
  }

// power operator
  final public void power() throws ParseException {
  Token x;
    unary();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POW:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_7;
      }
      x = jj_consume_token(POW);
      unary();
          combineBinary(x, new OpExponentiation());
    }
  }

// unary - or +, precedence 7
  final public void unary() throws ParseException {
    Token x;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
        x = jj_consume_token(MINUS);
        break;
      case PLUS:
        x = jj_consume_token(PLUS);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      element();
      if(x.kind == MINUS)
      {
        Expression a = (Expression)argStack.pop();
        Expression negateFunction = new OpUnaryMinus();
        negateFunction.addArgument(a);
        negateFunction.setPosition(x.beginLine, x.beginColumn);
        argStack.push(negateFunction);
      }
      break;
    case NUMBER:
    case IDENTIFIER:
    case 29:
      element();
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// other elements than operators
  final public void element() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      jj_consume_token(NUMBER);
         Double value;
         try
         {
            value = new Double(token.image);
         }
         catch (NumberFormatException e)
         {
             {if (true) throw new ParseException("Invalid number: " + token.image);}
         }
         DecimalConstantFunction func = new DecimalConstantFunction(value);
         func.setPosition(token.beginLine, token.beginColumn);
         argStack.push(func);
      break;
    default:
      jj_la1[12] = jj_gen;
      if (jj_2_1(2)) {
        function();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          jj_consume_token(IDENTIFIER);
        VariableFunction variableFunction = new VariableFunction(token.image);
        variableFunction.setPosition(token.beginLine, token.beginColumn);
        argStack.push(variableFunction);
        variables.add(variableFunction);
          break;
        case 29:
          jj_consume_token(29);
          expand();
          jj_consume_token(30);
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

// functions
  final public void function() throws ParseException {
    String functionName;
    int paramCount = 0;
    jj_consume_token(IDENTIFIER);
                   functionName = token.image;
    jj_consume_token(29);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
    case NUMBER:
    case IDENTIFIER:
    case 29:
      expand();
                                                                 paramCount++;
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 31:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_8;
        }
        jj_consume_token(31);
        expand();
                                                                                                paramCount++;
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    jj_consume_token(30);
        Expression function;
        try {
            function = functionFactory.createFunction(functionName);
        }
        catch (Exception e) {
            {if (true) throw new ParseException("Problem with function '" + functionName + "': " + e.toString());}
        }

        if (function == null)
            {if (true) throw new ParseException("Nonexisting function name '" + functionName + "'");}

        for (int i = 0; i < paramCount; i++) {
            Expression arg = argStack.pop();
            // when popping from the stack, we'll get the arguments in exactly the opposite
            // order, so insert them at the beginning
            function.addArgument(0, arg);
        }
        argStack.push(function);
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3_1() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(29)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public FormulaParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80,0x200000,0x40,0x7e000,0x7e000,0x300,0x300,0x101c00,0x101c00,0x80000,0x300,0x32000300,0x2000000,0x30000000,0x80000000,0x32000300,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public FormulaParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public FormulaParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new FormulaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public FormulaParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new FormulaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public FormulaParser(FormulaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(FormulaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[32];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 16; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 32; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
